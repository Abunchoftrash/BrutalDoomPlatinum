CLASS NewAllMap : inventory replaces Allmap
{
Default
{
  -INVENTORY.FANCYPICKUPSOUND;
  Inventory.PickupSound "items/computermap";
  +COUNTITEM
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "$GOTMAP";
  }
  
  States
	{
	Spawn:
		PMAP ABCDCB 6 Bright;
		Loop;
	}
  Override void tick()
	{	
		Super.tick();
	}
	override bool TryPickup (in out Actor toucher)
	{
		level.allmap = true;
		
	
	If(GetCvar("bd_allmapdx") == 0)
	{
	toucher.giveinventory("allthemap",1);
	}
	GoAwayAndDie ();
		return true;
		
	
	}
}

CLASS allthemap : powerupgiver
	{
		Default
		{
		Inventory.MaxAmount 0;
		Powerup.duration  0x7FFFFFFF;
		Powerup.type "powerscanner";
		+inventory.autoactivate;
		}
		States
		{
		Spawn:
		TNT1 A 1;
		Loop;
		}
}



class PowerShield : Powerup
{
	bool bhasplayedsound;
	int damagetimer;
	Default
	{
		Powerup.Duration 1;
		//Powerup.Color "00 00 FF", 0.5;
		+INVENTORY.HUBPOWER
	}
	
	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == GetClass())
		{ // Setting EffectTics to 0 will force Powerup's HandlePickup()
		  // method to reset the tic count so you get the red flash again.
			EffectTics = 0;
		}
		return Super.HandlePickup (item);
	}

	//===========================================================================
	//
	// APowerStrength :: DoEffect
	//
	//===========================================================================

	override void Tick ()
	{
		// Strength counts up to diminish the fade.
		EffectTics += 2;
		Super.Tick();
	}
	
	override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags) {
	
	
	if (owner && passive && damage > 0)
	{
	if(owner.countinv("basicarmor") > 0)
	{
	owner.a_startsound("StickyGrenade/Hit",125);
	bhasplayedsound = false;
	damagetimer = 240;
	}
	
	
	}
	
	}
	
	override void doeffect()
	{
	
		
		
		damagetimer = (damagetimer - 1);
		If(owner.countinv("basicarmor") < 21 && owner.countinv("basicarmor") > 0)
		{
		owner.a_startsound("mjoln3",126,CHANF_LOOPING);
		}
		else if(owner.countinv("basicarmor") < 1)
		{
		owner.a_startsound("mjoln2",126,CHANF_LOOPING);
		}
		else
		{
		owner.a_stopsound(126);
		}
		
		If(damagetimer < 1 && owner && owner.countinv("basicarmor") < 50)
		{
			If(level.time % 1 == 0)
			{
			owner.giveinventory("mjolnirarmor", 1);
			}
			If(!bhasplayedsound)
			{
			//owner.a_startsound("mjoln",125,CHANF_NOSTOP);
			owner.a_startsound("mjoln",125,CHANF_NOSTOP,1.0,ATTN_NORM,0.0,(owner.countinv("basicarmor") / 50.0 ));
			bhasplayedsound = true;
			}
		}
		//Else
		//{
		//owner.a_stopsound(125);
		//}

		If(owner)
		{
		let playerArmor = BasicArmor(owner.FindInventory('BasicArmor'));
		playerArmor.SavePercent = 1.0;
		}
		
		If(owner && owner.countinv("basicarmor") > 0)
		{
		owner.bnoblood = true;
		}
		Else if (owner)
		{
		owner.bnoblood = false;
		}
		
		Super.doeffect();
	}

	//===========================================================================
	//
	// APowerStrength :: GetBlend
	//
	//===========================================================================
	
	Override void detachfromowner()
	{
	
	owner.bnoblood = false;
	super.detachfromowner();
	}
	
	
	
}


class PowerShield2 : Powershield
{
	Default
	{
		Powerup.Color "00 00 00", 0.0;
		-INVENTORY.HUBPOWER
	}
}

class mjolnirarmor : BasicArmorBonus
{
	Default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupmessage "$GOTARMBONUS";
		Inventory.Icon "ARM2A0";
		Armor.Savepercent 100;
		Armor.Saveamount 1;
		Armor.Maxsaveamount 100;
		+COUNTITEM
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Spawn:
		BON2 ABCDCB 6;
		loop;
	}
}


CLASS PowerAreaScan : Powerup
{
Default
	{
		Powerup.Duration -7;
		Powerup.Color "11 FF 00", 0.9;
		+INVENTORY.HUBPOWER
	}
	
	override void Tick ()
	{
		// Strength counts up to diminish the fade.
		EffectTics += 6;
		Super.Tick();
	}
	
	
	override color GetBlend ()
	{
		// slowly fade the berserk out
		int cnt = 128 - (EffectTics>>3);

		if (cnt > 0)
		{
			return Color(BlendColor.a*cnt/256,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		return 0;
	}

}


Class PowerTimeFreezerNu : PowerTimeFreezer
{
	int freezertics;
	Default
	{
		+Inventory.NOSCREENBLINK;
		Powerup.duration -60;
	}
	override void initeffect()
	{
		owner.A_startsound("TIMEFREZ",66,0,1.0,ATTN_NONE);
		owner.giveinventory("PowerChronoEffect",1);
		Super.initeffect();
	}
	override void doeffect()
	{
		Super.doeffect();
		
		Freezertics = freezertics + 1;
		
		
		 S_ResumeSound(false);
      S_PauseSound(false, true); // This will freeze music, but not sound effects.
      if (Level.maptime & 1 || (Owner != null && Owner.player != null && Owner.player.cheats & CF_PREDICTING))
      {
         return;
      }
      Level.SetFrozen ( EffectTics > 4*32
         || (( EffectTics > 3*32 && EffectTics <= 4*32 ) && ((EffectTics + 1) & 15) != 0 )
         || (( EffectTics > 2*32 && EffectTics <= 3*32 ) && ((EffectTics + 1) & 7) != 0 )
         || (( EffectTics >   32 && EffectTics <= 2*32 ) && ((EffectTics + 1) & 3) != 0 )
         || (( EffectTics >    0 && EffectTics <= 1*32 ) && ((EffectTics + 1) & 1) != 0 ));
		If(freezertics >= 1045)
		{
		DepleteorDestroy();
		}
	}

}


CLASS PowerChronoEffect : Powerup
{
Default
	{
		Powerup.Duration -30;
		Powerup.Color "FF 6C 00";
		+INVENTORY.HUBPOWER
	}
}

class SalInvisibleActor : Actor
{
	Default
	{
		+NONSHOOTABLE
		+NODAMAGE
		+THRUACTORS
		+NOTELEPORT
		+DROPOFF
		+isMonster;
		//RenderStyle "None";
	}
	States
	{
		Spawn:
			TNT1 A -1;
			WAIT;
	}
}

class SalInvisHandler : EventHandler
{
	Array <Actor> monsterList;
	SalInvisibleActor playerInvisTarget[MAXPLAYERS];

	void SalInvisTargetStatus(int i)
	{
		let mo = players[i].mo;

		if (mo)
		{
			let targ = playerInvisTarget[i];

			if (targ && mo.bShadow == false)
			{
				// Destroy it if it exists
				targ.Destroy();
			}
		}
	}

	void SalMoveInvisTarget(int i)
	{
		let mo = players[i].mo;

		if (mo)
		{
			let targ = playerInvisTarget[i];

			if (mo.bShadow == true)
			{
				if (targ)
				{
					// Move the existing one directly to your current position
					targ.SetOrigin(mo.pos, false);
				}
				else
				{
					// Create a new invisible target spot at your location
					playerInvisTarget[i] = SalInvisibleActor(mo.Spawn("SalInvisibleActor", mo.pos, NO_REPLACE));
				}
			}
		}
	}

	override void WorldThingSpawned(WorldEvent e)
    {
		if (e.Thing.bIsMonster)
		{
			// Store in a list for later.
			monsterList.push(e.Thing);
		}
	}

	override void WorldTick()
	{
		Array <Actor> removalList;

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			let target = playerInvisTarget[i];

			if (!playeringame[i])
			{
				if (target)
				{
					target.Destroy();
				}
				continue;
			}
			else
			{
				let mo = players[i].mo;

				if (!target)
				{
					SalMoveInvisTarget(i);
				}
				else
				{
					SalInvisTargetStatus(i);

					if (mo.CurState == mo.ResolveState("Missile")
						|| mo.CurState == mo.ResolveState("Melee")
						|| mo.CurState == mo.ResolveState("Pain")
						|| mo.findinventory("moveblurspheretarget"))
					{
						SalMoveInvisTarget(i);
						mo.takeinventory("moveblurspheretarget",1);
					}
				}
			}
		}

		for (int i = 0; i < monsterList.Size(); i++)
        {
            Actor mo = monsterList[i];

			if (!mo || mo.health <= 0)
			{
				// Must be removed later, because we can't change iteration length.
				removalList.push(mo);
				continue;
            }

			if (mo.bSeeInvisible)
			{
				// Don't remove, but don't do the target setting either
				continue;
			}
			else if (mo.bmissile)
			{
				// Don't remove, but don't do the target setting either
				continue;
			}
			else
			{
				let target = PlayerPawn(mo.target);

				if (target)
				{
					let n = target.PlayerNumber();
					let invisTarget = playerInvisTarget[n];

					if (invisTarget)
					{
						// Your target has a SalInvisTarget,
						// so you need to change your target to it immediately.
						mo.target = invisTarget;
					}
				}
			}
        }

		for (int i = 0; i < removalList.Size(); i++)
        {
            int j = monsterList.Find(removalList[i]);
            monsterList.Delete(j);
        }
	}
}


CLASS PowerBoost : Powerup
{
	Default
	{
		Powerup.Duration 0x7FFFFFFD;
		+INVENTORY.HUBPOWER;
		+INVENTORY.NOTELEPORTFREEZE;
	}
}

class BoosterFrame : CustomInventory
{
	Default
	{
		+COUNTITEM
		+INVENTORY.ALWAYSPICKUP
		Inventory.PickupMessage "You got the Booster Frame!";
		Inventory.PickupSound "BSTRPUP";
		Scale 0.5;
	}
	States
	{
	Spawn:
		BFRM A -1;
		Stop;
	Pickup:
		TNT1 A 0 A_GiveInventory("PowerBoost");
		Stop;
	}
}




CLASS PowerRage : PowerSpeed
{
Default
	{
		Powerup.Duration -30;
		//Powerup.Color "91 00 00";
		Speed 2.0;
		+INVENTORY.HUBPOWER
	}
	override void initeffect()
	{
		owner.giveinventory("PowerStrength",1);
		Super.initeffect();
	}
	Override void tick()
	{
		if (Owner == NULL)
		{
			Destroy ();
		}
		//console.printf("%i",EffectTics);
		If(owner && !owner.findinventory("pausepowerup") || owner && EffectTics < 105)
		{
			if (EffectTics == 0 || (EffectTics > 0 && --EffectTics == 0))
			{
			Destroy ();
			}
		}
	}
	override void doeffect()
	{
		If(owner)
		{
			owner.A_selectweapon("melee_attacks");
		}
		Super.doeffect();
	}
	
	override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
	
		
		If(passive)
		{
			newdamage = (damage * 0.25);
		}
		Else If(owner && damage > 1000)
		{
			Owner.givebody(10);
			newdamage = damage;
			source.a_startsound("Items/Rage/Kill",624);
		}
		
	
	}
}

CLASs BDPInvuln : PowerInvulnerable
{
Override void tick()
	{
		if (Owner == NULL)
		{
			Destroy ();
		}
		If(owner && !owner.findinventory("pausepowerup") || owner && EffectTics < 105)
		{
		if (EffectTics == 0 || (EffectTics > 0 && --EffectTics == 0))
		{
			Destroy ();
		}
		}
	}
}

CLASS powerspeed2 : powerspeed
{
Default
{
Speed 1.7;
+INVENTORY.NOTELEPORTFREEZE;
inventory.icon "TNT1A0";
}
Override void tick()
	{
		if (Owner == NULL)
		{
			Destroy ();
		}
		If(owner && !owner.findinventory("pausepowerup") || owner && EffectTics < 105)
		{
		if (EffectTics == 0 || (EffectTics > 0 && --EffectTics == 0))
		{
			Destroy ();
		}
		}
	}

}


CLASS PowerquakeDamage : PowerDamage
{
Default
{
damagefactor "normal", 4;
//Inventory.icon "SIG2A0"
//activesound "items/quaddamage";
}

Override void tick()
	{
		if (Owner == NULL)
		{
			Destroy ();
		}
		
		If(EffectTics == 104)
		{
			Owner.a_startsound("items/quaddamage/warn",107);
		}
		
		If(owner && !owner.findinventory("pausepowerup") || owner && EffectTics < 105)
		{
			if (EffectTics == 0 || (EffectTics > 0 && --EffectTics == 0))
			{
				Destroy ();
			}
		}
	}
}

CLASs BDPBlur : PowerInvisibility
{
	Default
	{
		+INVENTORY.NOSCREENBLINK;
	}
Override void tick()
	{
		if (Owner == NULL)
		{
			Destroy ();
		}
		If(effecttics == 104)
		{
			Owner.a_startsound("BLURWARN",108);
		}
		If(effecttics == 15)
		{
			Owner.a_startsound("INVISOFF",107);
		}
		If(owner && !owner.findinventory("pausepowerup") || owner && EffectTics < 105)
		{
		if (EffectTics == 0 || (EffectTics > 0 && --EffectTics == 0))
		{
			
			Destroy ();
		}
		}
	}
	
	override void AlterWeaponSprite (VisStyle vis, in out int changed)
	{
		
		if (changed == 1)
		{
			// something else set the weapon sprite back to opaque but this item is still active.
			float ts = float((Strength / 100) * (special1 + 1));
			vis.Alpha = clamp((1. - ts), 0., 1.);
			switch (Mode)
			{
			case 'Fuzzy':
				vis.RenderStyle = STYLE_OptFuzzy;
				break;
			case 'Opaque':
				vis.RenderStyle = STYLE_Normal;
				break;
			case 'Additive':
				vis.RenderStyle = STYLE_Add;
				break;
			case 'Stencil':
				vis.RenderStyle = STYLE_Stencil;
				break;
			case 'TranslucentStencil':
				vis.RenderStyle = STYLE_TranslucentStencil;
				break;
			case 'AddStencil':
				vis.RenderStyle = STYLE_AddStencil;
				break;
			case 'None':
			case 'Cumulative':
			case 'Translucent':
			default:
				vis.RenderStyle = STYLE_Translucent;
				break;
			}
		}
		// Handling of Strife-like cumulative invisibility powerups, the weapon itself shouldn't become invisible
		if ((vis.Alpha < 0.25f && special1 > 0) || (vis.Alpha == 0))
		{
			vis.Alpha = clamp((1. - Strength/100.), 0., 1.);
			vis.invert = true;
		}
		changed = -1;	// This item is valid so another one shouldn't reset the translucency
	}
}


