
class Modifier_StayFrosty : BDPModifier
{
	Default
	{
		BDPModifier.Icon "STMST01";
		BDPModifier.DisplayName "Stay Frosty";
		BDPModifier.Description "Tactical mode! Stamina, recoil, and more!";
	}
	
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			if(!PlayerInGame[i]) continue;
			PlayerInfo plr = players[i];
			if(!plr) continue;
			
			let dplr = Brutal_PlayerBase(plr.mo);
			if(!dplr) continue;
			
			dplr.istactical = true;
		}
	}

}

class Modifier_Turbonerd : BDPModifier
{
	Default
	{
		BDPModifier.Icon "STNERD";
		BDPModifier.DisplayName "Turbonerd";
		BDPModifier.Description "Pistol start every level";
	}

	override void worldloaded(WorldEvent E)
	{
		//console.printf("Sex");
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			
			if(!PlayerInGame[i]) continue;
			PlayerInfo plr = players[i];
			if(!plr) continue;
			
			let playerPawn = PlayerPawn(plr.mo);
			ResetHealthAndArmor(playerPawn);
			ResetInventory     (playerPawn);
			ResetWeapons       (playerPawn);
			ResetAmmo          (playerPawn);
		}
	}
 

// private: //////////////////////////////////////////////////////////////////



  private static void ResetHealthAndArmor(PlayerPawn player)
  {
	//console.printf("Sex2");
    player.A_SetHealth(player.GetSpawnHealth());
    player.SetInventory("BasicArmor", 0);
  }

  private
  bool ShouldRemoveItem(Array<String> keepWeapons, Inventory item)
  {
    bool   droppable     = !item.bUNDROPPABLE;
    string className     = item.GetClassName();
    bool   notArmor      = !(item is "BasicArmor" || item is "HexenArmor");
    bool   shouldRemove  = droppable && notArmor;

    return shouldRemove;
  }

  /**
   * Resets health, armor, and droppable inventory items.
   */
  private
  void ResetInventory(PlayerPawn player)
  {
    // remove everything that is droppable
    Array<String> items;
    Array<String> keepWeapons;
    GetKeepWeapons(keepWeapons);

    for (let item = player.Inv; item; item = item.Inv)
    {
      if (ShouldRemoveItem(keepWeapons, item))
      {
        items.push(item.GetClassName());
      }
    }
    int size = items.Size();
    for (int i = 0; i < size; ++i)
    {
      player.A_TakeInventory(items[i]);
    }

    // Restore default things
    DropItem drop = player.GetDropItems();
    if (drop != null)
    {
      for (DropItem di = drop; di != null; di=di.Next)
      {
        if (di.Name == "None") { continue; }

        let weapon = (class<Weapon>)(di.Name);
        if (weapon != null) { continue; }

        let ammo = (class<Ammo>)(di.Name);
        if (ammo != null) { continue; }

        let inv = (class<Inventory>)(di.Name);

        if (inv != null)
        {
          player.A_SetInventory(di.Name, di.Amount);
        }
      }
    }
  }

  private
  void GetKeepWeapons(out Array<String> keepWeapons)
  {
    keepWeapons.Clear();
  }

  private
  bool WeaponIsInKeepList(Array<String> keepWeapons, String weaponClass)
  {
    uint index = keepWeapons.Find(weaponClass);
    return index != keepWeapons.size();
  }

  private
  bool ShouldRemoveWeapon(Array<String> keepWeapons, string weaponClass)
  {
    bool inKeepList = WeaponIsInKeepList(keepWeapons, weaponClass);

    bool shouldRemoveWeapon = !inKeepList;

    return shouldRemoveWeapon;
  }

  /**
   * Resets weapons, even if they are undroppable.
   * Ammo should be reset after resetting weapons.
   */
  private
  void ResetWeapons(PlayerPawn player)
  {
    DropItem drop = player.GetDropItems();

    Array<String> keepWeapons;
    GetKeepWeapons(keepWeapons);

    // remove weapons even if they are undroppable
    // removing an item invalidates the iterator, so
    // 1. remember weapon classes
    Array<String> weapons;
    for (let item = player.Inv; item; item = item.Inv)
    {
      if (item is "Weapon")
      {
        string weaponClass = item.GetClassName();
        if (ShouldRemoveWeapon(keepWeapons, weaponClass))
        {
          weapons.push(weaponClass);
        }
      }
    }

    // 2. Remove remembered weapon classes
    int size = weapons.Size();
    for (int i = 0; i < size; ++i)
    {
      player.A_TakeInventory(weapons[i]);
    }

    // If the player has any weapons in StartItem, set them here
    string lastStartWeapon = ""; // to set default weapon
    if (drop != null)
    {
      for (DropItem di = drop; di != null; di=di.Next)
      {
        if (di.Name == "None") { continue; }

        let weptype = (class<weapon>)(di.Name);

        if (weptype != null)
        {
          lastStartWeapon = di.Name;
          player.A_SetInventory(di.Name, di.Amount);
        }
      }
    }
    if (lastStartWeapon != "")
    {
      let weaponInInv = player.FindInventory(lastStartWeapon);
      player.UseInventory(weaponInInv);
    }
  }

  private
  void ResetAmmo(PlayerPawn player)
  {
    DropItem drop = player.GetDropItems();

    // Remove all ammo, except that with the UNDROPPABLE flag
    // 1. Remember ammo classes
    Array<string> ammos;
    for (let item = player.Inv; item; item = item.Inv)
    {
      if (item is "Ammo") { ammos.Push(item.GetClassName()); }
    }
    // 2. Remove
    int size = ammos.Size();
    for (int i = 0; i < size; ++i)
    {
      player.A_TakeInventory(ammos[i]);
    }

    //If the player has any ammo in StartItem, set it here
    if (drop != null)
    {
      for (DropItem di = drop; di != null; di = di.Next)
      {
        if (di.Name == "None") { continue; }

        let ammotype = (class<ammo>)(di.Name);
        if (ammotype != null)
        {
          player.A_SetInventory(di.Name, int(di.Amount));
        }
      }
    }
  }



  private static
  bool IsTitlemap()
  {
    bool isTitlemap = (level.mapname == "TITLEMAP");
    return isTitlemap;
  }


}

class Modifier_Mjolnir : BDPModifier
{
	Default
	{
		BDPModifier.Icon "HLMST00";
		BDPModifier.DisplayName "Mjolnir";
		BDPModifier.Description "Permanent Energy Armor powerup";
	}
	
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			if(!PlayerInGame[i]) continue;
			PlayerInfo plr = players[i];
			if(!plr) continue;
			
			let dplr = Brutal_PlayerBase(plr.mo);
			if(!dplr) continue;
			
			dplr.spawnwitharmor = true;
		}
	}
	
	Override void worldthingspawned(Worldevent e)
	{
		If(e.thing && e.thing is "EnergyArmor")
		{
			Actor.spawn("SkullTagArmor",e.thing.pos);
			E.thing.destroy();
		}
		
	}

}

class Modifier_ShockFactor : BDPModifier
{
	Default
	{
		BDPModifier.Icon "STMST12";
		BDPModifier.DisplayName "Shock Factor";
		BDPModifier.Description "Demons are hyper-aware of you";
	}
	
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			if(!PlayerInGame[i]) continue;
			PlayerInfo plr = players[i];
			if(!plr) continue;
			
			let dplr = Brutal_PlayerBase(plr.mo);
			if(!dplr) continue;
			
			dplr.shockfactor = true;
		}
	}
	
	Override void worldthingspawned(Worldevent e)
	{
		If(e.thing && e.thing.bismonster)
		{
			e.thing.bambush = false;
		}
	}
	
}


class Modifier_PerfectHatred : BDPModifier
{
	Default
	{
		BDPModifier.Icon "FC0OUCH4";
		BDPModifier.DisplayName "Perfect Hatred";
		BDPModifier.Description "Demons are permanently enraged";
	}
	
	Override void worldthingspawned(Worldevent e)
	{
		If(e.thing && e.thing.bismonster)
		{
			e.thing.bmissilemore = true;
			//e.thing.bmissileevenmore = true;
			e.thing.speed = (e.thing.speed * 1.5);
			e.thing.bnopain = true;
			e.thing.bnoinfighting = TRUE;
			e.thing.giveinventory("pissedarmor",1);
			//e.thing.A_giveinventory("thisreallypissesmeoff",(e.thing.health / 70));
		}
	}
	
}

class Modifier_ManAndAHalf : BDPModifier
{
	Default
	{
		BDPModifier.Icon "FC0EVL1";
		BDPModifier.DisplayName "Man And A Half";
		BDPModifier.Description "Start every level berserked";
	}
	
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			if(!PlayerInGame[i]) continue;
			PlayerInfo plr = players[i];
			if(!plr) continue;
			
			let dplr = Brutal_PlayerBase(plr.mo);
			if(!dplr) continue;
			
			dplr.spawnberserked = true;
		}
	}
	
	Override void worldthingspawned(Worldevent e)
	{
		If(e.thing && e.thing is "BerserkPack")
		{
			Actor.spawn("DemonRuneSpawner",e.thing.pos);
			E.thing.destroy();
		}
		
	}
	
}

class Modifier_Gunslinger : BDPModifier
{
	Default
	{
		BDPModifier.Icon "CIGST10";
		BDPModifier.DisplayName "Gunslinger";
		BDPModifier.Description "Weapons deselected for 5 or more seconds instantly reload";
	}
	
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			if(!PlayerInGame[i]) continue;
			PlayerInfo plr = players[i];
			if(!plr) continue;
			
			let dplr = Brutal_PlayerBase(plr.mo);
			if(!dplr) continue;
			
			for(let item = dplr.Inv; item.Inv; item = item.Inv)
			{
				let dweap = BrutalWeapon(item);
				if(!dweap) continue;
				dweap.gunslinger = true;
			}
		}
	}

}


class Modifier_OneUpmanship : BDPModifier
{
	Default
	{
		BDPModifier.Icon "BJBST00";
		BDPModifier.DisplayName "One-Upmanship";
		BDPModifier.Description "Soul Spheres grant extra lives";
	}
	Override void worldthingspawned(Worldevent e)
	{
	If(e.thing && e.thing.getclassname() == "LifeSphere")
		{
			Actor.spawn("LifeSphereOneUp",e.thing.pos);
			E.thing.destroy();
		}
		
	If(e.thing  && e.thing.getclassname() == "EnergySphere")
		{
			Actor.spawn("EnergySphereOneUp",e.thing.pos);
			E.thing.destroy();
		}
	
	}
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			if(!PlayerInGame[i]) continue;
			PlayerInfo plr = players[i];
			if(!plr) continue;
			
			let dplr = Brutal_PlayerBase(plr.mo);
			if(!dplr) continue;
			
			dplr.oneupmanship = true;
		}
	}

}

class Modifier_UltraNightmare : BDPModifier
{
	Default
	{
		BDPModifier.Icon "STFXDTH4";
		BDPModifier.DisplayName "Ultra Nightmare";
		BDPModifier.Description "Death is permanent. Good luck!";
	}
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			if(!PlayerInGame[i]) continue;
			PlayerInfo plr = players[i];
			if(!plr) continue;
			
			let dplr = Brutal_PlayerBase(plr.mo);
			if(!dplr) continue;
			
			dplr.ultranightmare = true;
		}
	}

}

class Modifier_SequenceBreak : BDPModifier
{
	Default
	{
		BDPModifier.Icon "CYBST00";
		BDPModifier.DisplayName "Sequence Break";
		BDPModifier.Description "Doors can be kicked down whether you have the key or not.";
	}
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			if(!PlayerInGame[i]) continue;
			PlayerInfo plr = players[i];
			if(!plr) continue;
			
			let dplr = Brutal_PlayerBase(plr.mo);
			if(!dplr) continue;
			
			dplr.sequencebreak = true;
		}
	}

}

class Modifier_MaximumOverdrive : BDPModifier
{
	Default
	{
		BDPModifier.Icon "AUGHST0";
		BDPModifier.DisplayName "MaximumOverdrive";
		BDPModifier.Description "A Booster Frame is equipped at all times!";
	}
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			if(!PlayerInGame[i]) continue;
			PlayerInfo plr = players[i];
			if(!plr) continue;
			
			let dplr = Brutal_PlayerBase(plr.mo);
			if(!dplr) continue;
			
			dplr.maximumoverdrive = true;
		}
	}

}

class Modifier_Reversal : BDPModifier
{
	Default
	{
		BDPModifier.Icon "MODPRY1";
		BDPModifier.DisplayName "Return To Sender";
		BDPModifier.Description "Berserked Melee attacks can parry projectiles, dealing increased damage";
	}
	
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			if(!PlayerInGame[i]) continue;
			PlayerInfo plr = players[i];
			if(!plr) continue;
			
			let dplr = Brutal_PlayerBase(plr.mo);
			if(!dplr) continue;
			
			dplr.reversalmodifier = true;
		}
	}

}

